{"version":3,"sources":["serviceWorker.js","actions/index.js","components/board/AddList.js","components/board/list/AddCard.js","components/board/Constants.js","components/board/list/card/Card.js","components/board/list/card/Description.js","components/board/list/card/ChecklistItem.js","components/board/list/card/Checklist.js","components/board/list/card/SideMenu.js","components/board/list/card/CardModal.js","components/board/list/ListDropTarget.js","components/board/list/List.js","components/board/Board.js","components/navbar/BoardTitle.js","components/navbar/Logo.js","components/navbar/MenuButton.js","components/navbar/ArchivedItem.js","components/navbar/ArchiveInner.js","components/navbar/Archive.js","components/navbar/ColorPalette.js","components/navbar/ChangeBackgroundInner.js","components/navbar/ChangeBackground.js","components/navbar/SidebarMenu.js","components/navbar/Sidebar.js","components/navbar/SidebarPortal.js","components/navbar/NavBar.js","components/app/App.js","reducers/index.js","reducers/listsReducer.js","reducers/cardsReducer.js","index.js"],"names":["Boolean","window","location","hostname","match","moveCard","cardId","newListHome","type","payload","AddList","state","mode","listTitle","borderColor","spans","addListRef","React","createRef","setSpans","height","current","clientHeight","Math","floor","setState","toggleMode","onFormSubmit","event","preventDefault","alert","listId","generateListId","inputId","props","lists","find","list","addList","inputValid","handleChange","e","target","value","this","ref","className","onClick","style","gridRowEnd","onSubmit","onChange","borderBottomColor","placeholder","autoFocus","Component","connect","title","AddCard","backgroundColor","cardTitle","default","hover","hoverBackground","resetBackground","addCardPromptRef","addCardInputRef","promptHeight","inputHeight","currentHeight","setSpansUpdate","generateCardId","cards","card","addCard","listHome","setSpansUpdateForCard","onMouseOver","onMouseLeave","ItemTypes","CARD","useDrag","item","end","monitor","dropResult","getDropResult","collect","isDragging","drag","popupHref","href","opacity","zIndex","cursor","Description","descriptionInput","updateCardDescription","description","name","id","cols","rows","ownProps","filter","checklistItemId","checklist","length","checked","checklistCheck","checklistDelete","checkItem","deleteItem","signalDelete","checklistItemTitle","Checklist","newItemInput","deleteCount","generateChecklistItemId","listItem","addChecklistItem","newDeleteCount","checklistItemsArray","map","key","SideMenu","panel","openMoveCardPanel","openCopyCardPanel","closePanel","archiveCard","onMoveSubmit","onCopySubmit","copyCard","listOptionsArray","archived","htmlFor","sourceCardId","newCardId","CardModal","inList","draggable","ListDropTarget","children","useDrop","accept","drop","List","addCardHeight","headingRef","cardsRef","setSpansListToggle","ceil","setSpansAddCard","cardsHeight","setSpansDnd","memoize","cardsArray","archiveList","cardModalsArray","width","listRef","Board","listsArray","backend","HTML5Backend","BoardTitle","inputText","titleText","inputHandler","keyDownHandler","newTitle","checkEmptyInput","onBlurHandler","onFocusHandler","select","onMouseOverHandler","document","activeElement","onMouseOutHandler","setInputSize","querySelector","setPageTitle","onKeyDown","onBlur","onFocus","onMouseOut","logo","MenuButton","toggleSidebar","sidebarHidden","restoreList","restoreCard","itemTitle","itemType","itemId","ArchiveInner","archivedCardsArray","archivedListsArray","toggleArchive","Archive","hidden","ColorPalette","borderRadius","color","margin","root","documentElement","setProperty","colorLight","colors","main","light","ChangeBackgroundInner","toggleChangeBackground","ChangeBackground","SidebarMenu","archiveHidden","changeBackgroundHidden","rel","sidebarRoot","getElementById","Sidebar","setVh","vh","innerHeight","el","createElement","addEventListener","appendChild","removeChild","SidebarPortal","ReactDOM","createPortal","NavBar","Logo","App","combineReducers","action","currentLists","forEach","currentCards","source","newCard","Object","assign","newItem","push","store","createStore","reducers","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4f00dad.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const addList = (title, listId) => {\n  return {\n    type: \"ADD_LIST\",\n    payload: {\n      title,\n      listId\n    }\n  };\n};\n\nexport const archiveList = listId => {\n  return {\n    type: \"ARCHIVE_LIST\",\n    payload: listId\n  };\n};\n\nexport const restoreList = listId => {\n  return {\n    type: \"RESTORE_LIST\",\n    payload: listId\n  };\n};\n\nexport const addCard = (title, cardId, listHome) => {\n  return {\n    type: \"ADD_CARD\",\n    payload: {\n      title,\n      cardId,\n      listHome\n    }\n  };\n};\n\nexport const moveCard = (cardId, newListHome) => {\n  return {\n    type: \"MOVE_CARD\",\n    payload: {\n      cardId,\n      newListHome\n    }\n  };\n};\n\nexport const copyCard = (sourceCardId, newCardId, newListHome) => {\n  return {\n    type: \"COPY_CARD\",\n    payload: {\n      sourceCardId,\n      newCardId,\n      newListHome\n    }\n  };\n};\n\nexport const archiveCard = cardId => {\n  return {\n    type: \"ARCHIVE_CARD\",\n    payload: cardId\n  };\n};\n\nexport const restoreCard = cardId => {\n  return {\n    type: \"RESTORE_CARD\",\n    payload: cardId\n  };\n};\n\nexport const updateCardDescription = (cardId, descriptionInput) => {\n  return {\n    type: \"UPDATE_CARD_DESCRIPTION\",\n    payload: {\n      cardId,\n      descriptionInput\n    }\n  };\n};\n\nexport const addChecklistItem = (\n  cardId,\n  checklistItemTitle,\n  checklistItemId,\n  checked\n) => {\n  return {\n    type: \"ADD_CHECKLIST_ITEM\",\n    payload: {\n      cardId,\n      checklistItemTitle,\n      checklistItemId,\n      checked\n    }\n  };\n};\n\nexport const checklistCheck = (cardId, checklistItemId) => {\n  return {\n    type: \"CHECKLIST_CHECK\",\n    payload: {\n      cardId,\n      checklistItemId\n    }\n  };\n};\n\nexport const checklistDelete = (cardId, checklistItemId) => {\n  return {\n    type: \"CHECKLIST_DELETE\",\n    payload: {\n      cardId,\n      checklistItemId\n    }\n  };\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addList } from \"../../actions\";\n\nclass AddList extends React.Component {\n  state = {\n    mode: \"prompt\",\n    listTitle: \"\",\n    borderColor: \"#555\",\n    spans: 0\n  };\n\n  // Inialize element height on grid. Its grid height is based on CSS grid spans, so we fetch that value from the DOM and set the number of spans accordingly\n  addListRef = React.createRef();\n\n  setSpans = () => {\n    const height = this.addListRef.current.clientHeight;\n\n    const spans = Math.floor(height / 10);\n\n    this.setState({ spans: spans });\n  };\n\n  componentDidMount() {\n    this.setSpans();\n  }\n\n  // Mode toggle. This component has two modes: \"prompt\" and \"input.\" The \"prompt\" mode is the initial mode, basically a button with a label like \"add new list.\" When the user clicks that button, the mode changes to \"input,\" and the user can input and submit a new list and title.\n  toggleMode = () => {\n    if (this.state.mode === \"prompt\") {\n      this.setState({ mode: \"input\" });\n    } else {\n      this.setState({ mode: \"prompt\" });\n    }\n  };\n\n  // Submit handlers\n  onFormSubmit = event => {\n    event.preventDefault();\n\n    // Validate input\n    if (!this.state.listTitle) {\n      alert(\"Please enter a title.\");\n      return false;\n    }\n\n    // Generate a unique key and listId in the event of duplicate list titles\n    const generateListId = inputId => {\n      if (!this.props.lists.find(list => list.listId === inputId)) {\n        return inputId;\n      } else {\n        inputId = `${inputId}-duplicate`;\n        return generateListId(inputId);\n      }\n    };\n    let listId = generateListId(this.state.listTitle);\n\n    // Submit input\n    this.props.addList(this.state.listTitle, listId);\n\n    // Clear input\n    this.setState({ listTitle: \"\", inputValid: false, borderColor: \"#555\" });\n\n    // Change mode back to \"prompt\"\n    this.toggleMode();\n  };\n\n  // Controlled input and validation to ensure unique list titles\n  handleChange = e => {\n    this.setState({\n      listTitle: e.target.value\n    });\n\n    e.target.value\n      ? this.setState({ borderColor: \"#4fa644\" })\n      : this.setState({ borderColor: \"red\" });\n  };\n\n  render() {\n    if (this.state.mode === \"prompt\") {\n      return (\n        <div ref={this.addListRef} className=\"addList addList__prompt\">\n          <button onClick={this.toggleMode} className=\"addList__prompt-button\">\n            <span className=\"addList__prompt-plus\">+</span>\n            <span className=\"addList__prompt-label\"> Add new list</span>\n          </button>\n        </div>\n      );\n    } else {\n      return (\n        <div\n          className=\"addList addList__input\"\n          ref={this.addListRef}\n          style={{ gridRowEnd: `span ${this.state.spans}` }}\n        >\n          <div className=\"addList__form\">\n            <form onSubmit={this.onFormSubmit} className=\"form\">\n              <div className=\"form__group\">\n                <input\n                  type=\"text\"\n                  className=\"form form__input form__input--validation\"\n                  value={this.state.listTitle}\n                  onChange={this.handleChange}\n                  style={{ borderBottomColor: this.state.borderColor }}\n                  placeholder=\"New list title...\"\n                  autoFocus\n                />\n              </div>\n              <div className=\"form__group\">\n                <input\n                  type=\"submit\"\n                  className=\"form__submit\"\n                  value=\"Add List\"\n                />\n              </div>\n            </form>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = state => {\n  return { lists: state.lists };\n};\n\nexport default connect(\n  mapStateToProps,\n  { addList }\n)(AddList);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addCard } from \"../../../actions\";\n\nclass AddCard extends React.Component {\n  // This component has two modes: \"prompt\" and \"input.\" The \"prompt\" mode is the initial mode, basically a button with a label like \"add new card.\" When the user clicks that button, the mode changes to \"input,\" and the user can input and submit a new card and title.\n  state = {\n    mode: \"prompt\",\n    backgroundColor: \"\",\n    cardTitle: \"\",\n    borderColor: \"#555\"\n  };\n\n  // Hover effect (CSS's :hover pseudoselector wasn't creating the desired effect)\n  backgroundColor = {\n    default: \"#e0e4ff\",\n    hover: \"#9093ad\"\n  };\n\n  hoverBackground = () => {\n    this.setState({ backgroundColor: this.backgroundColor.hover });\n  };\n\n  resetBackground = () => {\n    this.setState({ backgroundColor: this.backgroundColor.default });\n  };\n\n  // Set initial background color, get height for this.promptHeight\n  addCardPromptRef = React.createRef();\n  addCardInputRef = React.createRef();\n\n  promptHeight = 0;\n  inputHeight = 96; // TODO: don't hardcode this value\n\n  componentDidMount() {\n    this.setState({\n      backgroundColor: this.backgroundColor.default\n    });\n\n    this.promptHeight = this.addCardPromptRef.current.clientHeight;\n  }\n\n  // Mode and height toggle\n  toggleMode = () => {\n    if (this.state.mode === \"prompt\") {\n      this.setState({ mode: \"input\" });\n    } else {\n      this.setState({ mode: \"prompt\" });\n    }\n\n    let currentHeight =\n      this.state.mode === \"input\" ? this.promptHeight : this.inputHeight;\n    this.props.setSpansUpdate(currentHeight);\n  };\n\n  // Card sumbit handler\n  onFormSubmit = e => {\n    e.preventDefault();\n\n    // Validate input\n    if (!this.state.cardTitle) {\n      alert(\"Please enter a card title.\");\n      return false;\n    }\n\n    // Generate a unique key and cardId in the event of duplicate card titles\n    const generateCardId = inputId => {\n      if (!this.props.cards.find(card => card.cardId === inputId)) {\n        return inputId;\n      } else {\n        inputId = `${inputId}-duplicate`;\n        return generateCardId(inputId);\n      }\n    };\n    let cardId = generateCardId(this.state.cardTitle);\n\n    // Call addCard redux action if user has entered a card title\n    if (this.state.cardTitle) {\n      this.props.addCard(this.state.cardTitle, cardId, this.props.listHome);\n\n      // Clear input, change mode\n      this.setState({ cardTitle: \"\", mode: \"prompt\", borderColor: \"#555\" });\n      this.props.setSpansUpdateForCard(this.promptHeight);\n    } else {\n      return false;\n    }\n  };\n\n  // Controlled input handler\n  handleChange = e => {\n    this.setState({ cardTitle: e.target.value });\n\n    e.target.value\n      ? this.setState({ borderColor: \"#4fa644\" })\n      : this.setState({ borderColor: \"red\" });\n  };\n\n  render() {\n    if (this.state.mode === \"prompt\") {\n      return (\n        <div\n          className=\"list__addCard list__addCard-prompt\"\n          style={{ backgroundColor: this.state.backgroundColor }}\n          onMouseOver={this.hoverBackground}\n          onMouseLeave={this.resetBackground}\n          onClick={this.toggleMode}\n          ref={this.addCardPromptRef}\n        >\n          <span className=\"list__addCard-prompt--plus\">+</span>\n          <span className=\"list__addCard-prompt--label\">Add new card</span>\n        </div>\n      );\n    } else {\n      return (\n        <div\n          className=\"list__addCard list__addCard-form\"\n          style={{ backgroundColor: this.backgroundColor.default }}\n          ref={this.addCardInputRef}\n        >\n          <form onSubmit={this.onFormSubmit} className=\"form\">\n            <div className=\"form__group\">\n              <input\n                type=\"text\"\n                className=\"form form__input form__input--validation\"\n                value={this.state.cardTitle}\n                onChange={this.handleChange}\n                style={{ borderBottomColor: this.state.borderColor }}\n                placeholder=\"New card title...\"\n                autoFocus\n              />\n            </div>\n            <div className=\"form__group\">\n              <input type=\"submit\" className=\"form__submit\" value=\"Add Card\" />\n              <button className=\"form__cancel\" onClick={this.toggleMode}>\n                Cancel\n              </button>\n            </div>\n          </form>\n        </div>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = state => {\n  return { cards: state.cards };\n};\n\nexport default connect(\n  mapStateToProps,\n  { addCard }\n)(AddCard);\n","export const ItemTypes = {\n  CARD: \"card\"\n};\n","import React from \"react\";\nimport { ItemTypes } from \"../../Constants\";\nimport { useDrag } from \"react-dnd\";\nimport { connect } from \"react-redux\";\nimport { moveCard } from \"../../../../actions\";\n\nfunction Card(props) {\n  // Drag source hook\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: ItemTypes.CARD },\n    end: (item, monitor) => {\n      const dropResult = monitor.getDropResult();\n      if (item && dropResult) {\n        props.moveCard(props.cardId, dropResult.listId);\n      }\n    },\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging()\n    })\n  });\n\n  const popupHref = `#${props.cardId}`;\n\n  return (\n    <div className=\"card\">\n      <a\n        href={popupHref}\n        ref={drag}\n        className=\"card__preview\"\n        style={{\n          opacity: isDragging ? 0.5 : 1,\n          zIndex: isDragging ? 3 : 3,\n          cursor: \"move\"\n        }}\n      >\n        {props.cardTitle}\n      </a>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return { cards: state.cards };\n};\n\nexport default connect(\n  mapStateToProps,\n  { moveCard }\n)(Card);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { updateCardDescription } from \"../../../../actions\";\n\nclass Description extends React.Component {\n  state = {\n    descriptionInput: \"\",\n    mode: \"prompt\"\n  };\n\n  toggleMode = () => {\n    if (this.state.mode === \"prompt\") {\n      this.setState({ mode: \"input\" });\n    } else if (this.state.mode === \"input\") {\n      this.setState({ mode: \"prompt\" });\n    }\n  };\n\n  onFormSubmit = e => {\n    e.preventDefault();\n    /*\n    if (!this.state.descriptionInput) {\n      return false;\n    }\n    */\n\n    this.props.updateCardDescription(\n      this.props.cardId,\n      this.state.descriptionInput\n    );\n    this.setState({ mode: \"prompt\" });\n  };\n\n  handleChange = e => {\n    this.setState({ descriptionInput: e.target.value });\n  };\n\n  render() {\n    if (this.state.mode === \"prompt\") {\n      if (\n        !this.props.card.description ||\n        this.props.card.description === \"\\n\"\n      ) {\n        return (\n          <div className=\"description\">\n            <h3 className=\"modal__widget-heading\">Description</h3>\n            <button className=\"description__prompt\" onClick={this.toggleMode}>\n              Add a description...\n            </button>\n          </div>\n        );\n      } else {\n        return (\n          <div className=\"description\">\n            <h3 className=\"modal__widget-heading\">Description</h3>\n            <button className=\"modal__button--inline\" onClick={this.toggleMode}>\n              Edit\n            </button>\n            <div className=\"description__display\">\n              {this.props.card.description}\n            </div>\n          </div>\n        );\n      }\n    } else if (this.state.mode === \"input\") {\n      return (\n        <div className=\"description description__input\">\n          <h3 className=\"modal__widget-heading\">Description</h3>\n          <form onSubmit={this.onFormSubmit} className=\"form\">\n            <div className=\"form__group\">\n              <textarea\n                name=\"\"\n                id=\"\"\n                cols=\"30\"\n                rows=\"5\"\n                className=\"description__textarea\"\n                placeholder=\"Add a description...\"\n                onChange={this.handleChange}\n                value={this.state.descriptionInput}\n              ></textarea>\n            </div>\n            <div className=\"form__group\">\n              <input type=\"submit\" className=\"form__submit\" value=\"Save\" />\n              <button className=\"form__cancel\" onClick={this.toggleMode}>\n                Cancel\n              </button>\n            </div>\n          </form>\n        </div>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const { cardId } = ownProps;\n  const card = state.cards.filter(card => card.cardId === cardId)[0];\n  return { card };\n};\n\nexport default connect(\n  mapStateToProps,\n  { updateCardDescription }\n)(Description);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { checklistCheck, checklistDelete } from \"../../../../actions\";\n\nfunction ChecklistItem(props) {\n  function checkItem() {\n    props.checklistCheck(props.cardId, props.checklistItemId);\n  }\n\n  function deleteItem() {\n    props.checklistDelete(props.cardId, props.checklistItemId);\n    props.signalDelete();\n  }\n\n  if (!props.checked) {\n    return (\n      <div className=\"item\">\n        <div\n          className=\"item__checkbox item__checkbox--unchecked\"\n          onClick={checkItem}\n        ></div>\n        <div className=\"item__title\">{props.checklistItemTitle}</div>\n        <div className=\"item__delete\" onClick={deleteItem}>\n          &times;\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"item\">\n        <div\n          className=\"item__checkbox item__checkbox--checked\"\n          onClick={checkItem}\n        >\n          <div className=\"checkmark\">&#10004;</div>\n        </div>\n        <div className=\"item__title\">{props.checklistItemTitle}</div>\n        <div className=\"item__delete\" onClick={deleteItem}>\n          &times;\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const { checklistItemId, cardId } = ownProps;\n  let card = state.cards.filter(card => card.cardId === cardId)[0];\n  if (card.checklist.length > 0) {\n    let checked = card.checklist.filter(\n      item => item.checklistItemId === checklistItemId\n    )[0].checked;\n\n    return { checked };\n  }\n};\n\nexport default connect(\n  mapStateToProps,\n  { checklistCheck, checklistDelete }\n)(ChecklistItem);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addChecklistItem } from \"../../../../actions\";\n\nimport ChecklistItem from \"./ChecklistItem\";\n\nclass Checklist extends React.Component {\n  state = {\n    mode: \"prompt\",\n    newItemInput: \"\",\n    deleteCount: 0\n  };\n\n  toggleMode = () => {\n    if (this.state.mode === \"prompt\") {\n      this.setState({ mode: \"input\" });\n    } else if (this.state.mode === \"input\") {\n      this.setState({ mode: \"prompt\" });\n    }\n  };\n\n  onFormSubmit = e => {\n    e.preventDefault();\n\n    if (!this.state.newItemInput) {\n      return false;\n    }\n\n    // Generate a unique key and listItemId in the event of duplicate list item titles\n    const generateChecklistItemId = inputId => {\n      if (\n        !this.props.card.checklist.find(\n          listItem => listItem.checklistItemId === inputId\n        )\n      ) {\n        return inputId;\n      } else {\n        inputId = `${inputId}-duplicate`;\n        return generateChecklistItemId(inputId);\n      }\n    };\n    let checklistItemId = generateChecklistItemId(this.state.newItemInput);\n\n    //Redux call to add new item to checklist array of card (unchecked by default)\n    this.props.addChecklistItem(\n      this.props.cardId,\n      this.state.newItemInput,\n      checklistItemId,\n      false\n    );\n\n    //Clear input from state\n    this.setState({ newItemInput: \"\" });\n  };\n\n  handleChange = e => {\n    this.setState({ newItemInput: e.target.value });\n  };\n\n  signalDelete = () => {\n    let newDeleteCount = this.state.deleteCount + 1;\n    this.setState({ deleteCount: newDeleteCount });\n  };\n\n  checklistItemsArray = () =>\n    this.props.card.checklist.map(item => (\n      <ChecklistItem\n        key={item.checklistItemId}\n        checklistItemTitle={item.checklistItemTitle}\n        checklistItemId={item.checklistItemId}\n        cardId={this.props.cardId}\n        signalDelete={this.signalDelete}\n      />\n    ));\n\n  render() {\n    if (this.state.mode === \"prompt\") {\n      return (\n        <div className=\"checklist\">\n          <h3 className=\"modal__widget-heading\">Checklist</h3>\n          <button onClick={this.toggleMode} className=\"modal__button--inline\">\n            Add Item\n          </button>\n          <div className=\"checklist__items\">{this.checklistItemsArray()}</div>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"checklist\">\n          <h3 className=\"modal__widget-heading\">Checklist</h3>\n          <div className=\"checklist__items\">{this.checklistItemsArray()}</div>\n          <form onSubmit={this.onFormSubmit} className=\"form\">\n            <div className=\"form__group\">\n              <input\n                type=\"text\"\n                className=\"form form__input form__input--validation\"\n                value={this.state.newItemInput}\n                onChange={this.handleChange}\n                style={{ borderBottomColor: this.state.borderColor }}\n                placeholder=\"Add checklist item\"\n                autoFocus\n              />\n            </div>\n            <div className=\"form__group\">\n              <input type=\"submit\" className=\"form__submit\" value=\"Add Item\" />\n              <button className=\"form__cancel\" onClick={this.toggleMode}>\n                Cancel\n              </button>\n            </div>\n          </form>\n        </div>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const { cardId } = ownProps;\n  const card = state.cards.filter(card => card.cardId === cardId)[0];\n  return { card };\n};\n\nexport default connect(\n  mapStateToProps,\n  { addChecklistItem }\n)(Checklist);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { archiveCard, moveCard, copyCard } from \"../../../../actions\";\n\nclass SideMenu extends React.Component {\n  state = { panel: \"\", value: this.props.listHome };\n\n  openMoveCardPanel = () => {\n    this.setState({ panel: \"move\" });\n  };\n\n  openCopyCardPanel = () => {\n    this.setState({ panel: \"copy\" });\n  };\n\n  closePanel = () => {\n    this.setState({ panel: \"\" });\n  };\n\n  archiveCard = () => {\n    this.props.archiveCard(this.props.cardId);\n    this.setState({ panel: \"\" });\n  };\n\n  handleChange = e => {\n    this.setState({ value: e.target.value });\n  };\n\n  onMoveSubmit = e => {\n    e.preventDefault();\n    this.props.moveCard(this.props.cardId, this.state.value);\n    this.setState({ panel: \"\", value: this.props.listHome });\n  };\n\n  onCopySubmit = e => {\n    e.preventDefault();\n\n    // Generate a unique key and cardId in the event of duplicate card titles\n    const generateCardId = inputId => {\n      if (!this.props.cards.find(card => card.cardId === inputId)) {\n        return inputId;\n      } else {\n        inputId = `${inputId}-duplicate`;\n        return generateCardId(inputId);\n      }\n    };\n    let cardId = generateCardId(this.props.cardId);\n\n    this.props.copyCard(this.props.cardId, cardId, this.state.value);\n\n    this.setState({ panel: \"\", value: this.props.listHome });\n  };\n\n  listOptionsArray = () =>\n    this.props.lists\n      .filter(list => !list.archived)\n      .map(list => (\n        <option key={list.listId} value={list.listId}>\n          {list.title}\n        </option>\n      ));\n\n  render() {\n    if (!this.state.panel) {\n      return (\n        <div className=\"sidemenu\">\n          <button className=\"sidemenu__button\" onClick={this.openMoveCardPanel}>\n            Move\n            <br />\n            Card\n          </button>\n          <button className=\"sidemenu__button\" onClick={this.openCopyCardPanel}>\n            Copy\n            <br />\n            Card\n          </button>\n          <button className=\"sidemenu__button\" onClick={this.archiveCard}>\n            Archive\n            <br />\n            Card\n          </button>\n        </div>\n      );\n    } else if (this.state.panel === \"move\") {\n      return (\n        <div className=\"sidemenu\">\n          <button className=\"sidemenu__button\" onClick={this.openMoveCardPanel}>\n            Move\n            <br />\n            Card\n          </button>\n          <button className=\"sidemenu__button\" onClick={this.openCopyCardPanel}>\n            Copy\n            <br />\n            Card\n          </button>\n          <button className=\"sidemenu__button\" onClick={this.archiveCard}>\n            Archive\n            <br />\n            Card\n          </button>\n\n          <div className=\"sidemenu__panel\">\n            <h4 className=\"sidemenu__panel--heading\">Move Card</h4>\n            <div className=\"sidemenu__panel--close\" onClick={this.closePanel}>\n              &times;\n            </div>\n            <form onSubmit={this.onMoveSubmit}>\n              <label className=\"sidemenu__panel--label\" htmlFor=\"moveSelect\">\n                Choose destination list:{\" \"}\n              </label>\n              <select\n                value={this.state.value}\n                onChange={this.handleChange}\n                className=\"sidemenu__panel--select\"\n                id=\"moveSelect\"\n              >\n                {this.listOptionsArray()}\n              </select>\n\n              <input\n                type=\"submit\"\n                value=\"Move\"\n                className=\"sidemenu__panel--submit\"\n              />\n            </form>\n          </div>\n        </div>\n      );\n    } else if (this.state.panel === \"copy\") {\n      return (\n        <div className=\"sidemenu\">\n          <button className=\"sidemenu__button\" onClick={this.openMoveCardPanel}>\n            Move\n            <br />\n            Card\n          </button>\n          <button className=\"sidemenu__button\" onClick={this.openCopyCardPanel}>\n            Copy\n            <br />\n            Card\n          </button>\n          <button className=\"sidemenu__button\" onClick={this.archiveCard}>\n            Archive\n            <br />\n            Card\n          </button>\n\n          <div className=\"sidemenu__panel\">\n            <h4 className=\"sidemenu__panel--heading\">Copy Card</h4>\n            <div className=\"sidemenu__panel--close\" onClick={this.closePanel}>\n              &times;\n            </div>\n            <form onSubmit={this.onCopySubmit}>\n              <label className=\"sidemenu__panel--label\" htmlFor=\"copySelect\">\n                Choose destination list:{\" \"}\n              </label>\n              <select\n                value={this.state.value}\n                onChange={this.handleChange}\n                className=\"sidemenu__panel--select\"\n                id=\"copySelect\"\n              >\n                {this.listOptionsArray()}\n              </select>\n\n              <input\n                type=\"submit\"\n                value=\"Copy\"\n                className=\"sidemenu__panel--submit\"\n              />\n            </form>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const { lists, cards } = state;\n  const listHome = cards.filter(card => card.cardId === ownProps.cardId)[0]\n    .listHome;\n  return { lists, cards, listHome };\n};\n\nexport default connect(\n  mapStateToProps,\n  { archiveCard, moveCard, copyCard }\n)(SideMenu);\n","import React from \"react\";\nimport Description from \"./Description\";\nimport Checklist from \"./Checklist\";\nimport SideMenu from \"./SideMenu\";\n\nfunction CardModal(props) {\n  return (\n    <div className=\"modal__overlay\" id={props.cardId}>\n      <div className=\"modal\">\n        <div className=\"modal__heading\">\n          <h2 className=\"modal__heading--main\">{props.cardTitle}</h2>\n          <h4 className=\"modal__heading--sub\">\n            In list: <span className=\"list-title\">{props.inList}</span>\n          </h4>\n        </div>\n\n        <a href=\"#board\" className=\"modal__close\" draggable=\"false\">\n          &times;\n        </a>\n        <div className=\"modal__main\">\n          <div className=\"modal__main--left\">\n            <Description cardId={props.cardId}></Description>\n\n            <Checklist cardId={props.cardId}></Checklist>\n          </div>\n          <div className=\"modal__main--right\">\n            <SideMenu cardId={props.cardId}></SideMenu>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CardModal;\n","import React from \"react\";\nimport { ItemTypes } from \"../Constants\";\nimport { useDrop } from \"react-dnd\";\n\nfunction ListDropTarget({ style, listId, children }) {\n  // Drop source hook\n  const [, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    drop: () => ({ listId: listId })\n    /*\n    collect: monitor => ({\n      canDrop: monitor.canDrop()\n    })\n    */\n  });\n\n  return (\n    <div ref={drop} className=\"drop-target\" style={{ ...style }}>\n      {children}\n    </div>\n  );\n}\n\nexport default ListDropTarget;\n","import AddCard from \"./AddCard\";\nimport Card from \"./card/Card\";\nimport CardModal from \"./card/CardModal\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { archiveList } from \"../../../actions\";\nimport ListDropTarget from \"./ListDropTarget\";\nimport memoize from \"memoize-one\";\n\nclass List extends React.Component {\n  state = {\n    spans: 13,\n    height: 130,\n    addCardHeight: 67\n  };\n\n  // Element height handlers. The Lists' height is based on CSS grid spans, so when the Lists' height changes, we have to set a new value for the spans.\n  headingRef = React.createRef();\n  cardsRef = React.createRef();\n\n  setSpansListToggle = addCardHeight => {\n    // The height of the List is the sum of the heights of its heading, its cards div and the AddCard component. Since we have to create a ref for AddCard directly on that component, we make this function a prop of AddCard, retrieve the height from inside that AddCard, and pass that height as an argument to this function.\n    const height =\n      this.headingRef.current.clientHeight +\n      this.cardsRef.current.clientHeight +\n      addCardHeight;\n\n    const spans = Math.ceil(height / 10) + 1; // +1 to ensure a minimum bottom margin of one span height for the List\n\n    this.setState({ spans: spans, height: height });\n    if (addCardHeight !== this.state.addCardHeight) {\n      this.setState({ addCardHeight: addCardHeight });\n    }\n  };\n\n  setSpansAddCard = addCardHeight => {\n    // When adding a card, the cards div's ref gives us its height before the card has been added. Therefore, before the card is added, we need to predict what that div's height will be and set the List's height accordingly.\n    let cardsHeight;\n    const cardsDivHeightWhenEmpty = 10;\n    const heightOfOneCard = 46;\n\n    if (this.cardsRef.current.clientHeight === cardsDivHeightWhenEmpty) {\n      cardsHeight = heightOfOneCard;\n    } else {\n      cardsHeight = this.cardsRef.current.clientHeight + heightOfOneCard;\n    }\n\n    const height =\n      this.headingRef.current.clientHeight + cardsHeight + addCardHeight;\n\n    const spans = Math.ceil(height / 10) + 1;\n    this.setState({ spans: spans, height: height });\n    if (addCardHeight !== this.state.addCardHeight) {\n      this.setState({ addCardHeight: addCardHeight });\n    }\n  };\n\n  // Function to handle list height change, memoized to respond to drag-and-drop events (i.e. to cards prop changes)\n  setSpansDnd = memoize((cardsArray, addCardHeight) => {\n    const heightOfOneCard = 46;\n    const headingHeight = 48;\n    const height =\n      headingHeight + cardsArray.length * heightOfOneCard + 5 + addCardHeight;\n    const spans = Math.ceil(height / 10) + 1;\n\n    this.setState({ spans: spans, height: height });\n  });\n\n  // Event handler for when user clicks the remove button\n  archiveList = () => {\n    this.props.archiveList(this.props.listId);\n  };\n\n  // Make array of Card components from props\n  cardsArray = () =>\n    this.props.cards.map(card => (\n      <Card\n        key={card.cardId}\n        cardId={card.cardId}\n        cardTitle={card.title}\n        inList={this.props.listTitle}\n      />\n    ));\n\n  // Make array of CardPopup components from props\n  cardModalsArray = () =>\n    this.props.cards.map(card => (\n      <CardModal\n        key={card.cardId}\n        cardId={card.cardId}\n        cardTitle={card.title}\n        inList={this.props.listTitle}\n      />\n    ));\n\n  render() {\n    // Memoized function: only gets called when value of one of the arguments changes (essentially, when a card gets added to or removed from props)\n    this.setSpansDnd(this.props.cards, this.state.addCardHeight);\n\n    return (\n      <ListDropTarget\n        // Style ensures drop target is the same size as the list\n        style={{\n          height: `${this.state.height}px`,\n          width: \"100%\",\n          gridRowEnd: `span ${this.state.spans}`\n        }}\n        listId={this.props.listId}\n      >\n        <div\n          className=\"list\"\n          ref={this.listRef}\n          style={{ gridRowEnd: `span ${this.state.spans}` }}\n        >\n          <div className=\"list__remove\" onClick={this.archiveList}>\n            &times;\n          </div>\n          <h2 className=\"list__heading\" ref={this.headingRef}>\n            {this.props.listTitle}\n          </h2>\n          <div className=\"list__cards\" ref={this.cardsRef}>\n            {this.cardsArray()}\n          </div>\n          <AddCard\n            listHome={this.props.listId}\n            setSpansUpdate={this.setSpansListToggle}\n            setSpansUpdateForCard={this.setSpansAddCard}\n          />\n        </div>\n        <div className=\"card-modals\">{this.cardModalsArray()}</div>\n      </ListDropTarget>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  //Iterate over every card in state, return only the non-archived ones with a listHome corresponding to this list\n  const { listId } = ownProps;\n  const cards = state.cards.filter(\n    card => card.listHome === listId && !card.archived\n  );\n\n  return { lists: state.lists, cards: cards };\n};\nexport default connect(\n  mapStateToProps,\n  { archiveList }\n)(List);\n","import AddList from \"./AddList\";\nimport List from \"./list/List\";\nimport React from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport { connect } from \"react-redux\";\n\nclass Board extends React.Component {\n  // Iterate over every list in state, return the non-archived ones, and make and array of List components out of them\n  listsArray = () =>\n    this.props.lists\n      .filter(list => !list.archived)\n      .map(list => (\n        <List\n          key={list.listId}\n          listTitle={list.title}\n          listId={list.listId}\n          cards={[]}\n        />\n      ));\n\n  render() {\n    return (\n      <DndProvider backend={HTML5Backend}>\n        <div className=\"board\" id=\"board\">\n          {this.listsArray()}\n          <AddList />\n        </div>\n      </DndProvider>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return { lists: state.lists };\n};\n\nexport default connect(mapStateToProps)(Board);\n","import React, { Component } from \"react\";\n\nclass BoardTitle extends Component {\n  state = {\n    inputText: \"Board Title\",\n    titleText: \"Board Title\"\n  };\n\n  // Initially sets size of input and page title\n  componentDidMount() {\n    this.setInputSize(this.state.titleText.length);\n    this.setPageTitle();\n  }\n\n  // Sets page title and input size every time state is updated\n  componentDidUpdate() {\n    this.setPageTitle();\n    this.setInputSize();\n  }\n\n  // Updates state on user input\n  inputHandler = event => {\n    const inputText = event.target.value;\n\n    this.setState({\n      inputText: inputText\n    });\n  };\n\n  // When user input hears Enter or Escape, calls checkEmptyInput\n  keyDownHandler = event => {\n    const newTitle = event.target.value;\n\n    if (event.key === \"Enter\" || event.key === \"Escape\") {\n      this.checkEmptyInput(newTitle);\n    }\n  };\n\n  // Calls checkEmptyInput when input loses focus\n  onBlurHandler = event => {\n    const newTitle = event.target.value;\n\n    event.target.className = \"navbar__input\";\n\n    this.checkEmptyInput(newTitle);\n  };\n\n  // Changes input styling on focus, and selects all input text\n  onFocusHandler = event => {\n    event.target.className = \"navbar__input navbar__input--infocus\";\n\n    event.target.select();\n  };\n\n  // Changes input styling on mouse over\n  onMouseOverHandler = event => {\n    document.activeElement === event.target\n      ? (event.target.className = \"navbar__input navbar__input--infocus\")\n      : (event.target.className = \"navbar__input navbar__input--hover\");\n  };\n\n  // Changes input styling on mouse out\n  onMouseOutHandler = event => {\n    document.activeElement === event.target\n      ? (event.target.className = \"navbar__input navbar__input--infocus\")\n      : (event.target.className = \"navbar__input\");\n  };\n\n  // If user input is empty, resets value to most recently saved value of titleText\n  // Otherwise, value of titleText set to current input value\n  checkEmptyInput = newTitle => {\n    if (newTitle === \"\") {\n      this.setState({\n        inputText: this.state.titleText\n      });\n    } else {\n      this.setState({\n        titleText: newTitle\n      });\n    }\n  };\n\n  // Changes input width dynamically\n  setInputSize = () => {\n    const input = document.querySelector(\"input\");\n\n    input.style.width = `${this.state.inputText.length * 10 + 30}px`;\n  };\n\n  // Changes page title dynamically\n  setPageTitle = () => {\n    document.title = `${this.state.inputText} - Geckorello, a Trello Front-End Clone`;\n  };\n\n  render() {\n    return (\n      <div>\n        <input\n          className=\"navbar__input\"\n          value={this.state.inputText}\n          onChange={this.inputHandler}\n          onKeyDown={this.keyDownHandler}\n          onBlur={this.onBlurHandler}\n          onFocus={this.onFocusHandler}\n          onMouseOver={this.onMouseOverHandler}\n          onMouseOut={this.onMouseOutHandler}\n        ></input>\n      </div>\n    );\n  }\n}\n\nexport default BoardTitle;\n","import React from \"react\";\n\nconst logo = () => {\n  return (\n    <div className=\"logo navbar__logo\">\n      <h1>Geckorello</h1>\n    </div>\n  );\n};\n\nexport default logo;\n","import React from \"react\";\n\nconst MenuButton = props => {\n  // Changes input styling on mouse over\n  const onMouseOverHandler = event => {\n    event.target.className = \"navbar__menu navbar__menu--hover\";\n  };\n\n  // Changes input styling on mouse out\n  const onMouseOutHandler = event => {\n    event.target.className = \"navbar__menu\";\n  };\n\n  return (\n    <div className=\"navbar__menu-wrapper\">\n      <h1\n        onClick={props.toggleSidebar}\n        onMouseOver={onMouseOverHandler}\n        onMouseOut={onMouseOutHandler}\n        className=\"navbar__menu\"\n      >\n        {props.sidebarHidden ? \"Show Menu\" : \"Hide Menu\"}\n      </h1>\n    </div>\n  );\n  /*\n  if (props.sidebarHidden) {\n    return (\n      <div className=\"menu navbar__menu\">\n        <h1 onClick={props.toggleSidebar} onMouseOver={onMouseOverHandler} onMouseOut={onMouseOutHandler}>{props.sidebarHidden ? \"Show Menu\" : \"Hide Menu\"}</h1>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"menu navbar__menu\">\n        <h1 onClick={props.toggleSidebar}>Hide Menu</h1>\n      </div>\n    );\n  }\n  */\n};\n\nexport default MenuButton;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { restoreList, restoreCard } from \"../../actions\";\n\nconst ArchivedItem = props => {\n  const restore = () => {\n    if (props.itemType === \"list\") {\n      props.restoreList(props.itemId);\n    } else if (props.itemType === \"card\") {\n      props.restoreCard(props.itemId);\n    }\n  };\n\n  return (\n    <div className=\"archive__item\">\n      <div className=\"archive__item--title\">{props.itemTitle}</div>\n      <button className=\"archive__item--restore\" onClick={restore}>\n        Restore\n      </button>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return { lists: state.lists, cards: state.cards };\n};\n\nexport default connect(\n  mapStateToProps,\n  { restoreList, restoreCard }\n)(ArchivedItem);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport ArchivedItem from \"./ArchivedItem\";\n\nclass ArchiveInner extends React.Component {\n  state = { mode: \"lists\" };\n\n  toggleMode = () => {\n    if (this.state.mode === \"lists\") {\n      this.setState({ mode: \"cards\" });\n    } else {\n      this.setState({ mode: \"lists\" });\n    }\n  };\n\n  archivedCardsArray = () =>\n    this.props.cards\n      .filter(card => card.archived)\n      .map(card => (\n        <ArchivedItem\n          key={card.cardId}\n          itemId={card.cardId}\n          itemTitle={card.title}\n          itemType=\"card\"\n        />\n      ));\n  archivedListsArray = () =>\n    this.props.lists\n      .filter(list => list.archived)\n      .map(list => (\n        <ArchivedItem\n          key={list.listId}\n          itemId={list.listId}\n          itemTitle={list.title}\n          itemType=\"list\"\n        />\n      ));\n\n  render() {\n    if (this.state.mode === \"lists\") {\n      return (\n        <div>\n          <h2 className=\"sidebar-menu__heading\">Archive</h2>\n          <div\n            className=\"sidebar-menu__interface--close\"\n            onClick={this.props.toggleArchive}\n          >\n            &times;\n          </div>\n          <div className=\"archive-toggle\">\n            <button className=\"archive-toggle__button archive-toggle__button--active\">\n              Lists\n            </button>\n            <button\n              className=\"archive-toggle__button archive-toggle__button--inactive\"\n              onClick={this.toggleMode}\n            >\n              Cards\n            </button>\n          </div>\n          <div className=\"archive__list\">{this.archivedListsArray()}</div>\n        </div>\n      );\n    } else if (this.state.mode === \"cards\") {\n      return (\n        <div>\n          <h2 className=\"sidebar-menu__heading\">Archive</h2>\n          <div\n            className=\"sidebar-menu__interface--close\"\n            onClick={this.props.toggleArchive}\n          >\n            &times;\n          </div>\n          <div className=\"archive-toggle\">\n            <button\n              className=\"archive-toggle__button archive-toggle__button--inactive\"\n              onClick={this.toggleMode}\n            >\n              Lists\n            </button>\n            <button className=\"archive-toggle__button archive-toggle__button--active\">\n              Cards\n            </button>\n          </div>\n          <div className=\"archive__list\">{this.archivedCardsArray()}</div>\n        </div>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = state => {\n  return { lists: state.lists, cards: state.cards };\n};\n\nexport default connect(mapStateToProps)(ArchiveInner);\n","import React from \"react\";\nimport ArchiveInner from \"./ArchiveInner\";\n\nconst Archive = props => {\n  if (props.hidden) {\n    return (\n      <div className=\"sidebar-menu__interface sidebar-menu__interface--hidden\">\n        <ArchiveInner toggleArchive={props.toggleArchive} />\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"sidebar-menu__interface sidebar-menu__interface--visible\">\n        <ArchiveInner toggleArchive={props.toggleArchive} />\n      </div>\n    );\n  }\n};\n\nexport default Archive;\n","import React from \"react\";\n\nconst ColorPalette = props => {\n  const updateBackgroundColor = () => {\n    let root = document.documentElement;\n\n    root.style.setProperty(\"--body-background\", props.color);\n    root.style.setProperty(\"--body-background-light\", props.colorLight);\n  };\n  return (\n    <div\n      className=\"color-palette\"\n      style={{\n        borderRadius: \"10px\",\n        height: \"7.5rem\",\n        width: \"14rem\",\n        backgroundColor: props.color,\n        margin: \"1.5rem\",\n        cursor: \"pointer\"\n      }}\n      onClick={updateBackgroundColor}\n    ></div>\n  );\n};\n\nexport default ColorPalette;\n","import React from \"react\";\nimport ColorPalette from \"./ColorPalette\";\n\nconst colors = [\n  {\n    main: \"#0000ff\",\n    light: \"#00a2ff\"\n  },\n  {\n    main: \"#008000\",\n    light: \"#00db00\"\n  },\n  {\n    main: \"#ff0000\",\n    light: \"#ff0088\"\n  },\n  {\n    main: \"#ff8c00\",\n    light: \"#ffc824\"\n  },\n  {\n    main: \"#800080\",\n    light: \"#cc00cc\"\n  }\n];\n\nconst colorPalettes = () =>\n  colors.map(color => (\n    <ColorPalette\n      key={color.main}\n      color={color.main}\n      colorLight={color.light}\n    />\n  ));\n\nconst ChangeBackgroundInner = props => {\n  return (\n    <div>\n      <h2 className=\"sidebar-menu__heading\">Change Background</h2>\n      <div\n        className=\"sidebar-menu__interface--close\"\n        onClick={props.toggleChangeBackground}\n      >\n        &times;\n      </div>\n      <div className=\"colors\">{colorPalettes()}</div>\n    </div>\n  );\n};\n\nexport default ChangeBackgroundInner;\n","import React from \"react\";\nimport ChangeBackgroundInner from \"./ChangeBackgroundInner.js\";\n\nconst ChangeBackground = props => {\n  if (props.hidden) {\n    return (\n      <div className=\"sidebar-menu__interface sidebar-menu__interface--hidden\">\n        <ChangeBackgroundInner\n          toggleChangeBackground={props.toggleChangeBackground}\n        />\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"sidebar-menu__interface sidebar-menu__interface--visible\">\n        <ChangeBackgroundInner\n          toggleChangeBackground={props.toggleChangeBackground}\n        />\n      </div>\n    );\n  }\n};\n\nexport default ChangeBackground;\n","import React from \"react\";\n\nimport Archive from \"./Archive\";\nimport ChangeBackground from \"./ChangeBackground\";\n\nclass SidebarMenu extends React.Component {\n  state = { archiveHidden: true, changeBackgroundHidden: true };\n\n  toggleArchive = () => {\n    this.setState({ archiveHidden: !this.state.archiveHidden });\n  };\n\n  toggleChangeBackground = () => {\n    this.setState({\n      changeBackgroundHidden: !this.state.changeBackgroundHidden\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"sidebar-menu\">\n        <h2 className=\"sidebar-menu__heading\">Menu</h2>\n        <div className=\"sidebar-menu__close\" onClick={this.props.toggleSidebar}>\n          &times;\n        </div>\n        <hr />\n        <button className=\"sidebar-menu__item\" onClick={this.toggleArchive}>\n          Show Archive\n        </button>\n        <button\n          className=\"sidebar-menu__item\"\n          onClick={this.toggleChangeBackground}\n        >\n          Change Background\n        </button>\n        <a\n          href=\"https://github.com/chingu-voyages/v11-geckos-team-03\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <button className=\"sidebar-menu__item\">View Repo</button>\n        </a>\n        <Archive\n          hidden={this.state.archiveHidden}\n          toggleArchive={this.toggleArchive}\n        />\n        <ChangeBackground\n          hidden={this.state.changeBackgroundHidden}\n          toggleChangeBackground={this.toggleChangeBackground}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SidebarMenu;\n","import React from \"react\";\nimport SidebarMenu from \"./SidebarMenu\";\n\nconst sidebarRoot = document.getElementById(\"sidebar-root\");\n\nclass Sidebar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.el = document.createElement(\"div\");\n  }\n\n  setVh = () => {\n    let vh = window.innerHeight * 0.01;\n    document.documentElement.style.setProperty(\"--vh\", `${vh}px`);\n  };\n  componentDidMount() {\n    this.setVh();\n    window.addEventListener(\"resize\", this.setVh);\n    sidebarRoot.appendChild(this.el);\n  }\n\n  componentWillUnmout() {\n    sidebarRoot.removeChild(this.el);\n  }\n\n  render() {\n    if (this.props.hidden) {\n      return (\n        <div className=\"sidebar__wrapper\">\n          <div className=\"sidebar sidebar--hidden\">\n            <SidebarMenu />\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"sidebar__wrapper\">\n          <div className=\"sidebar sidebar--shown\">\n            <SidebarMenu toggleSidebar={this.props.toggleSidebar} />\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Sidebar;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst sidebarRoot = document.getElementById(\"sidebar-root\");\n\nclass SidebarPortal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.el = document.createElement(\"div\");\n    this.el.className = \"portal-inner\";\n  }\n\n  setVh = () => {\n    let vh = window.innerHeight * 0.01;\n    document.documentElement.style.setProperty(\"--vh\", `${vh}px`);\n  };\n  componentDidMount() {\n    this.setVh();\n    window.addEventListener(\"resize\", this.setVh);\n    sidebarRoot.appendChild(this.el);\n  }\n\n  componentWillUnmout() {\n    sidebarRoot.removeChild(this.el);\n  }\n\n  render() {\n    return ReactDOM.createPortal(this.props.children, this.el);\n  }\n}\n\nexport default SidebarPortal;\n","import React, { Component } from \"react\";\n\nimport BoardTitle from \"./BoardTitle\";\nimport Logo from \"./Logo\";\nimport MenuButton from \"./MenuButton\";\nimport Sidebar from \"./Sidebar\";\nimport SidebarPortal from \"./SidebarPortal\";\n\nimport \"../../index.css\";\n\nclass NavBar extends Component {\n  state = {\n    sidebarHidden: true\n  };\n\n  toggleSidebar = () => {\n    if (this.state.sidebarHidden) {\n      this.setState({ sidebarHidden: false });\n    } else {\n      this.setState({ sidebarHidden: true });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"navbar\">\n        <Logo />\n        <BoardTitle />\n        <MenuButton\n          toggleSidebar={this.toggleSidebar}\n          sidebarHidden={this.state.sidebarHidden}\n        />\n        <SidebarPortal>\n          <Sidebar\n            hidden={this.state.sidebarHidden}\n            toggleSidebar={this.toggleSidebar}\n          />\n        </SidebarPortal>\n      </div>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport Board from \"../board/Board\";\nimport Nav from \"../navbar/NavBar\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  // Render two elements: a navbar and a board\n  render() {\n    return (\n      <div className=\"App\">\n        <Nav />\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport listsReducer from \"./listsReducer\";\nimport cardsReducer from \"./cardsReducer\";\n\nexport default combineReducers({\n  lists: listsReducer,\n  cards: cardsReducer\n});\n","export default (state = [], action) => {\n  let currentLists = [...state];\n  switch (action.type) {\n    case \"ADD_LIST\":\n      return [\n        ...state,\n        {\n          title: action.payload.title,\n          listId: action.payload.listId,\n          archived: false\n        }\n      ];\n    case \"ARCHIVE_LIST\":\n      currentLists.forEach(list => {\n        if (list.listId === action.payload) {\n          list.archived = true;\n        }\n      });\n      return currentLists;\n    case \"RESTORE_LIST\":\n      currentLists.forEach(list => {\n        if (list.listId === action.payload) {\n          list.archived = false;\n        }\n      });\n      return currentLists;\n    default:\n      return state;\n  }\n};\n","export default (state = [], action) => {\n  let currentCards = [...state];\n  switch (action.type) {\n    case \"ADD_CARD\":\n      // Return current state with new card appendded\n      return [\n        ...state,\n        {\n          title: action.payload.title,\n          cardId: action.payload.cardId,\n          listHome: action.payload.listHome,\n          archived: false,\n          checklist: [],\n          description: \"\"\n        }\n      ];\n    case \"MOVE_CARD\":\n      // Locate coresponding card in store\n      currentCards.forEach(card => {\n        if (card.cardId === action.payload.cardId) {\n          // Update listHome\n          card.listHome = action.payload.newListHome;\n        }\n      });\n      return currentCards;\n    case \"COPY_CARD\":\n      const source = currentCards.find(\n        card => (card.cardId = action.payload.sourceCardId)\n      );\n      const newCard = {};\n      Object.assign(newCard, source);\n      newCard.listHome = action.payload.newListHome;\n      newCard.cardId = action.payload.newCardId;\n      return [...currentCards, newCard];\n    case \"ARCHIVE_CARD\":\n      currentCards.forEach(card => {\n        if (card.cardId === action.payload) {\n          card.archived = true;\n        }\n      });\n      return currentCards;\n    case \"RESTORE_CARD\":\n      currentCards.forEach(card => {\n        if (card.cardId === action.payload) {\n          card.archived = false;\n        }\n      });\n      return currentCards;\n    case \"UPDATE_CARD_DESCRIPTION\":\n      // Locate coresponding card in store\n      currentCards.forEach(card => {\n        if (card.cardId === action.payload.cardId) {\n          // Update description\n          card.description = action.payload.descriptionInput;\n        }\n      });\n      return currentCards;\n    case \"ADD_CHECKLIST_ITEM\":\n      const { checklistItemTitle, checklistItemId, checked } = action.payload;\n      const newItem = { checklistItemTitle, checklistItemId, checked };\n      // Locate corresponding card in store\n      currentCards.forEach(card => {\n        if (card.cardId === action.payload.cardId) {\n          // Add newItem to that card's checklist\n          card.checklist.push(newItem);\n        }\n      });\n      return currentCards;\n    case \"CHECKLIST_CHECK\":\n      // Locate corresponding card in store\n      currentCards.forEach(card => {\n        if (card.cardId === action.payload.cardId) {\n          // Locate corresponding checklist item inside that card's checklist\n          card.checklist.forEach(item => {\n            if (item.checklistItemId === action.payload.checklistItemId) {\n              // Check or uncheck\n              item.checked = !item.checked;\n            }\n          });\n        }\n      });\n      return currentCards;\n    case \"CHECKLIST_DELETE\":\n      // Locate corresponding card in store\n      currentCards.forEach(card => {\n        if (card.cardId === action.payload.cardId) {\n          // Locate corresponding checklist item inside, filter out item with payload's id\n          card.checklist = card.checklist.filter(\n            item => item.checklistItemId !== action.payload.checklistItemId\n          );\n        }\n      });\n      return currentCards;\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./index.css\";\nimport App from \"./components/app/App\";\nimport reducers from \"./reducers\";\n\nconst store = createStore(reducers);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}